#!r6rs
(library (IntSeq Utils bfiles)
  (export compute-b-file read-b-file-to-vector bisect-b-file-and-apply)
  (import (rnrs base (6))
          (rnrs io ports (6))
          (rnrs io simple (6))
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                                                                          ;;
;; This module Copyright (C) 2009-2015 Antti Karttunen, subject to GPL v2.  ;;
;;                                                                          ;;
;; Started writing this R6RS-module Dec 10 2015 by transferring three       ;;
;; functions from intfun_b.scm                                              ;;
;;                                                                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (compute-b-file Afun outfile start upto-n)
   (call-with-output-file outfile
     (lambda (outport)
       (let loop ((n start) (z (Afun start)))
          (let ((humout (string-append "n=" (number->string n) ": " (number->string z)))
                (filout (string-append (number->string n) " " (number->string z)))
               )
            (begin
              (display humout) ;; Output for humans.
              (newline)
              (display filout outport) ;; Output to b-file.
              (newline outport)
              (flush-output-port outport)
              (cond ((< n upto-n) (loop (+ 1 n) (Afun (+ 1 n)))))
            )
          )
       )
     )
   )
)


(define (read-b-file-to-vector infile size) ;; XXX - Note that currently the input b-file should be ultra-clean!
   (call-with-input-file infile
     (lambda (inport)
         (let ((intvec (make-vector size)))
            (let loop ((n_in_file (read inport)))
               (cond ((eof-object? n_in_file) intvec)
                     (else
                        (let ((an_in_file (read inport)))
                          (begin
                              (vector-set! intvec n_in_file an_in_file)
                              (loop (read inport))
                          )
                        )
                     )
               )
            )
         )
     )
   )
)



;; XXX - Note that the input b-file should be ultra-clean, e.g. one generated by compute-b-file above.
(define (bisect-b-file-and-apply Afun infile outfile start even-or-odd-bit)
   (call-with-input-file infile
     (lambda (inport)
       (call-with-output-file outfile
         (lambda (outport)
            (let loop ((n_in_file (read inport)) (our_n start))
               (cond ((not (eof-object? n_in_file))
                        (let ((an_in_file (read inport)))
                          (cond ((= (mod n_in_file 2) even-or-odd-bit)
                                    (display (string-append (number->string our_n)
                                                            " "
                                                            (number->string (Afun an_in_file))
                                             )
                                             outport
                                    )
                                    (newline outport)
                                    (flush-output-port outport)
                                    (loop (read inport) (+ 1 our_n))
                                )
                                (else (loop (read inport) our_n))
                          )
                        )
                     )
               )
            )
           )
         )
       )
   )
)

) ;; End of module bfiles.ss

